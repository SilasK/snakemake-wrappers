def get_fractions():
    if config.get("reads_are_paired", True):
        fractions = ["R1", "R2"]
    else:
        fractions = "se"

    return fractions


rule all:
    input:
        expand("covstats/{sample}.tsv", sample=["A", "B"]),


rule create_reads:
    input:
        ref="genome.fasta",
    output:
        out=expand("reads/raw/{{sample}}_{fraction}.fastq.gz", fraction=get_fractions()),
    params:
        command="randomreads.sh",
        length=100,
        reads=10,
        paired=True,
        overwrite=True,
        pigz=True,
    resources:
        mem_mb=1000,
    log:
        "logs/create_reads/{sample}.log",
    wrapper:
        "master/bio/bbtools"


rule loglog:
    input:
        expand("reads/raw/{{sample}}_{fraction}.fastq.gz", fraction=get_fractions()),
    log:
        stdout="logs/loglog/{sample}.log",
        stderr="logs/loglog/{sample}.err",  # Captures the error output of the command
    params:
        command="loglog.sh",
        machineout=True,
        extra="buckets=2048 seed=1234",
    threads: 2
    resources:
        mem_mb=1024,
    wrapper:
        "master/bio/bbtools"


# ########## Quality control of reads ##########
rule bbduk:
    input:
        reads=expand("reads/raw/{{sample}}_{fraction}.fastq.gz", get_fractions()),
        adapters="adapt.fas",
    output:
        out=expand("reads/trimmed/{{sample}}_{fraction}.fastq.gz", get_fractions()),
        #outsingle="reads/trimmed/{sample}.single.fastq.gz",
        outmatch=expand(
            "reads/discarded/{{sample}}_{fraction}.fastq.gz", get_fractions()
        ),
        stats="stats/trimming_stats/{sample}.txt",
    log:
        "logs/bbduk/{sample}.log",
    threads: 7
    params:
        command="bbduk.sh",
        extra="tpe tbo ",
        ref=lambda w, input: [input.adapters, "adapters", "artifacts"],
        ktrim="r",
        k=23,
        mink=11,
        hdist=1,
        trimpolygright=10,
        minlen=25,
        maxns=30,
        entropy=0.5,
        entropywindow=50,
        entropyk=5,
    resources:
        mem_mb=4000,
    log:
        "logs/trim/{sample}.log",
    wrapper:
        "master/bio/bbtools"


rule tadpole_correct:
    input:
        expand("reads/trimmed/{{sample}}_{fraction}.fastq.gz", get_fractions()),
    output:
        out=expand("reads/corrected/{{sample}}_{fraction}.fastq.gz", get_fractions()),
        outd=expand("reads/badquality/{{sample}}_{fraction}.fastq.gz", get_fractions()),
    log:
        "logs/correct/{sample}.log",
    params:
        command="tadpole.sh",
        mode="correct",
    threads: 2
    resources:
        mem_mb=1024,
    wrapper:
        "master/bio/bbtools"


##########  Assembly ##########
rule tadpole_assemble:
    input:
        expand("reads/corrected/{{sample}}_{fraction}.fastq.gz", get_fractions()),
    output:
        "assembly/{sample}.fasta.gz",
    log:
        "logs/assemble/{sample}.log",
    params:
        command="tadpole.sh",
        mode="contig",
    threads: 2
    resources:
        mem_mb=1024,
    wrapper:
        "master/bio/bbtools"


########## Map ##########
rule index_assembly:
    input:
        "assembly/{sample}.fasta.gz",
    output:
        path=temp(directory("path/to/indexes/assembly/{sample}/")),
    params:
        command="bbmap.sh",
    log:
        "logs/index_assembly/{sample}.log",
    resources:
        mem_mb=1000,
    wrapper:
        "master/bio/bbtools"


rule map_reads_with_bbmap:
    input:
        input=expand(
            "reads/QC/{{sample}}_{fraction}.fastq.gz", fraction=get_fractions()
        ),
        path=directory("path/to/indexes/assembly/{sample}/"),  # path to the index base folder
    output:
        out="mapped/{sample}.bam",
    log:
        stderr="logs/bbmap/{sample}.log",  # Split stdout and stderr into separate files to have a nice log file
        stdout="logs/bbmap/{sample}.out",
    params:
        command="bbmap.sh",  # Define which bbmap command to use
        # All parameters are passed to the command
        machineout=True,
        overwrite=True,  # reccomended
        unpigz=True,
        nodisk=True,  # Don't write a index
    threads: 12
    resources:
        mem_mb=1000,  # optional: bbmap normaly needs a lot of memory, e.g. 60GB
    wrapper:
        "master/bio/bbtools"


rule pileup:  # all rules use the same wrapper!!
    input:
        input="mapped/{sample}.bam",
        ref="genome.fasta",
    output:
        covstats="covstats/{sample}.tsv",
        basecov="basecov/{sample}.tsv",
    log:
        stderr="logs/pileup/{sample}.log",
        stdout="logs/pileup/{sample}.out",
    params:
        command="pileup.sh",
        nzo=True,
        overwrite=True,
    threads: 4
    resources:
        mem_mb=1000,
    wrapper:
        "master/bio/bbtools"
